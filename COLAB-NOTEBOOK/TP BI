{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMG/dKAbegNxQiYhMhH/Ipj"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":43,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rtd7uWb2UQAs","executionInfo":{"status":"ok","timestamp":1731896482280,"user_tz":180,"elapsed":265,"user":{"displayName":"Nicolas Prosperi","userId":"10161961860091181701"}},"outputId":"13a19f20-2ddc-4348-ad41-930d6d2823d7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Base de datos creada con éxito.\n"]}],"source":["#--------------BASE DE DATOS TICKETERA---------------------------------------\n","import sqlite3\n","\n","# Conexión a la base de datos SQLite (se guarda en un archivo local)\n","conn = sqlite3.connect('ticket_database.db')\n","cursor = conn.cursor()\n","\n","# Crear tablas\n","queries = [\n","    # Tabla localidad\n","    \"\"\"\n","    CREATE TABLE IF NOT EXISTS localidad (\n","        id_localidad INTEGER PRIMARY KEY AUTOINCREMENT,\n","        sector_localidad CHAR(1) NOT NULL,\n","        fila_localidad INT NOT NULL,\n","        numero_localidad INT NOT NULL\n","    );\n","    \"\"\",\n","    # Tabla evento\n","    \"\"\"\n","    CREATE TABLE IF NOT EXISTS evento (\n","        id_evento INTEGER PRIMARY KEY AUTOINCREMENT,\n","        descripcion VARCHAR(255) NOT NULL,\n","        fecha DATE NOT NULL\n","    );\n","    \"\"\",\n","    # Tabla cliente\n","    \"\"\"\n","    CREATE TABLE IF NOT EXISTS cliente (\n","        id_cliente INTEGER PRIMARY KEY AUTOINCREMENT,\n","        nombre VARCHAR(255) NOT NULL,\n","        apellido VARCHAR(255) NOT NULL,\n","        email VARCHAR(255) NOT NULL UNIQUE\n","    );\n","    \"\"\",\n","    # Tabla tipo_producto\n","    \"\"\"\n","    CREATE TABLE IF NOT EXISTS tipo_producto (\n","        id_tipo_producto INTEGER PRIMARY KEY AUTOINCREMENT,\n","        descripcion VARCHAR(255) NOT NULL\n","    );\n","    \"\"\",\n","    # Tabla producto_base\n","    \"\"\"\n","    CREATE TABLE IF NOT EXISTS producto_base (\n","        id_producto INTEGER PRIMARY KEY AUTOINCREMENT,\n","        nombre VARCHAR(255) NOT NULL,\n","        descripcion TEXT,\n","        precio DECIMAL(10, 2) NOT NULL,\n","        id_tipo_producto INTEGER NOT NULL,\n","        FOREIGN KEY (id_tipo_producto) REFERENCES tipo_producto (id_tipo_producto)\n","    );\n","    \"\"\",\n","    # Tabla localidad_evento\n","    \"\"\"\n","    CREATE TABLE IF NOT EXISTS localidad_evento (\n","        id_localidad INTEGER NOT NULL,\n","        id_evento INTEGER NOT NULL,\n","        estado TEXT CHECK (estado IN ('Disponible', 'Reservada', 'Vendida', 'Escaneada OK', 'No Disponible')) DEFAULT 'Disponible',\n","        localia BOOLEAN,\n","        PRIMARY KEY (id_localidad, id_evento),\n","        FOREIGN KEY (id_evento) REFERENCES evento (id_evento),\n","        FOREIGN KEY (id_localidad) REFERENCES localidad (id_localidad)\n","    );\n","    \"\"\",\n","    # Tabla ticket_evento\n","    \"\"\"\n","    CREATE TABLE IF NOT EXISTS ticket_evento (\n","        id_ticket_evento INTEGER PRIMARY KEY AUTOINCREMENT,\n","        id_producto INTEGER,\n","        id_localidad INTEGER NOT NULL,\n","        id_evento INTEGER NOT NULL,\n","        nombre_persona_ocupante VARCHAR(100) NOT NULL,\n","        dni_persona_ocupante VARCHAR(100) NOT NULL,\n","        FOREIGN KEY (id_localidad) REFERENCES localidad (id_localidad),\n","        FOREIGN KEY (id_evento) REFERENCES evento (id_evento),\n","        FOREIGN KEY (id_producto) REFERENCES producto_base (id_producto)\n","    );\n","    \"\"\",\n","    # Tabla factura\n","    \"\"\"\n","    CREATE TABLE IF NOT EXISTS factura (\n","        id_factura INTEGER PRIMARY KEY AUTOINCREMENT,\n","        fecha TIMESTAMP NOT NULL,\n","        id_cliente INTEGER,\n","        total DECIMAL(10, 2) NOT NULL,\n","        FOREIGN KEY (id_cliente) REFERENCES cliente (id_cliente)\n","    );\n","    \"\"\",\n","    # Tabla item_factura\n","    \"\"\"\n","    CREATE TABLE IF NOT EXISTS item_factura (\n","        id_item INTEGER PRIMARY KEY AUTOINCREMENT,\n","        id_factura INTEGER,\n","        id_producto_base INTEGER,\n","        cantidad INT NOT NULL,\n","        precio_unitario DECIMAL(10, 2) NOT NULL,\n","        FOREIGN KEY (id_factura) REFERENCES factura (id_factura),\n","        FOREIGN KEY (id_producto_base) REFERENCES producto_base (id_producto)\n","    );\n","    \"\"\",\n","    # Tabla producto_merchandising\n","    \"\"\"\n","    CREATE TABLE IF NOT EXISTS producto_merchandising (\n","        id_producto INTEGER PRIMARY KEY AUTOINCREMENT,\n","        id_producto_base INTEGER,\n","        stock INT NOT NULL,\n","        FOREIGN KEY (id_producto_base) REFERENCES producto_base (id_producto)\n","    );\n","    \"\"\",\n","    # Tabla encuentro_deportivo\n","    \"\"\"\n","    CREATE TABLE IF NOT EXISTS encuentro_deportivo (\n","        id_evento INTEGER NOT NULL,\n","        equipo_local INTEGER NOT NULL,\n","        equipo_visitante INTEGER NOT NULL,\n","        PRIMARY KEY (id_evento),\n","        FOREIGN KEY (id_evento) REFERENCES evento (id_evento),\n","        FOREIGN KEY (equipo_local) REFERENCES equipo (id_equipo),\n","        FOREIGN KEY (equipo_visitante) REFERENCES equipo (id_equipo)\n","    );\n","    \"\"\",\n","    # Tabla equipo\n","    \"\"\"\n","    CREATE TABLE IF NOT EXISTS equipo (\n","        id_equipo INTEGER PRIMARY KEY AUTOINCREMENT,\n","        nombre TEXT NOT NULL UNIQUE,\n","        pais TEXT\n","    );\n","    \"\"\",\n","    # Tabla objetivos_equipo\n","    \"\"\"\n","    CREATE TABLE IF NOT EXISTS objetivos_equipo (\n","      equipo INTEGER NOT NULL,\n","      mes_anio TEXT NOT NULL,\n","      monto REAL NOT NULL,\n","      PRIMARY KEY (equipo, mes_anio),\n","      FOREIGN KEY (equipo) REFERENCES equipo (id_equipo)\n","      ON DELETE NO ACTION\n","      ON UPDATE NO ACTION\n","    );\n","    \"\"\"\n","]\n","\n","# Ejecutar todas las consultas\n","for query in queries:\n","    cursor.execute(query)\n","\n","# Confirmar los cambios y cerrar la conexión\n","conn.commit()\n","conn.close()\n","\n","print(\"Base de datos creada con éxito.\")"]},{"cell_type":"code","source":["#-----------DATAWAREHOUSE----------------------------------------\n","\n","import sqlite3\n","\n","# Conexión a la base de datos de análisis\n","conn = sqlite3.connect('tickets_dw.db')\n","cursor = conn.cursor()\n","\n","# Crear las tablas\n","queries_dw = [\n","    # Tabla fecha_dimension\n","    \"\"\"\n","    CREATE TABLE IF NOT EXISTS fecha_dimension (\n","        mes_anio DATE NOT NULL,\n","        fecha_id VARCHAR(6) NOT NULL UNIQUE,\n","        PRIMARY KEY (fecha_id)\n","    );\n","    \"\"\",\n","    # Tabla fact_table\n","    \"\"\"\n","    CREATE TABLE IF NOT EXISTS fact_table (\n","        nombre_evento VARCHAR(255) NOT NULL,\n","        equipo_local VARCHAR(45),\n","        equipo_visitante VARCHAR(45),\n","        tipo_evento VARCHAR(45),\n","        localidad_evento_estado VARCHAR(45),\n","        nombre_apellido_cliente VARCHAR(45),\n","        dni_cliente VARCHAR(45),\n","        nombre_apellido_asistente VARCHAR(45),\n","        dni_asistente VARCHAR(45),\n","        precio DECIMAL(10, 2),\n","        equipo_ticket VARCHAR(45),\n","        fecha_id VARCHAR(6),\n","        FOREIGN KEY (fecha_id) REFERENCES fecha_dimension (fecha_id)\n","    );\n","    \"\"\",\n","    # Tabla total_ventas_equipo_objetivos\n","    \"\"\"\n","    CREATE TABLE IF NOT EXISTS total_ventas_equipo_objetivos (\n","        idtotal_ventas_equipo_objetivos INTEGER PRIMARY KEY AUTOINCREMENT,\n","        nombre_equipo VARCHAR(45) NOT NULL,\n","        total_ventas_mes DOUBLE NOT NULL,\n","        objetivos_mes DOUBLE NOT NULL,\n","        fecha_id VARCHAR(6) NOT NULL,\n","        FOREIGN KEY (fecha_id) REFERENCES fecha_dimension (fecha_id)\n","    );\n","    \"\"\"\n","]\n","\n","# Ejecutar todas las consultas\n","for query in queries_dw:\n","    cursor.execute(query)\n","\n","# Confirmar los cambios y cerrar la conexión\n","conn.commit()\n","conn.close()\n","\n","print(\"Base de datos de análisis creada con éxito.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GzsbKt5lUwbO","executionInfo":{"status":"ok","timestamp":1731896487101,"user_tz":180,"elapsed":241,"user":{"displayName":"Nicolas Prosperi","userId":"10161961860091181701"}},"outputId":"8da88ab3-6bc6-4caf-8ea9-55df3c8c6d10"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["Base de datos de análisis creada con éxito.\n"]}]},{"cell_type":"code","source":["#-----------CARGA DE CSV------------------\n","\n","import sqlite3\n","import pandas as pd\n","\n","# Conexión a la base de datos\n","db_path = \"ticket_database.db\"\n","conn = sqlite3.connect(db_path)\n","\n","tables = [\n","    \"localidad\",\n","    \"evento\",\n","    \"cliente\",\n","    \"tipo_producto\",\n","    \"producto_base\",\n","    \"localidad_evento\",\n","    \"ticket_evento\",\n","    \"factura\",\n","    \"item_factura\",\n","    \"producto_merchandising\",\n","    \"equipo\",\n","    \"encuentro_deportivo\",\n","    \"objetivos_equipo\"\n","    ]\n","\n","# Truncar (vaciar) las tablas\n","for table_name in tables:\n","    conn.execute(f\"DELETE FROM {table_name};\")\n","    print(f\"Tabla {table_name} truncada.\")\n","\n","# Cargar cada archivo CSV en su tabla correspondiente\n","csv_files = {\n","    \"localidad\": \"./DATA/localidad.csv\",\n","    \"evento\": \"./DATA/evento.csv\",\n","    \"cliente\": \"./DATA/cliente.csv\",\n","    \"tipo_producto\": \"./DATA/tipo_producto.csv\",\n","    \"producto_base\": \"./DATA/producto_base.csv\",\n","    \"localidad_evento\": \"./DATA/localidad_evento.csv\",\n","    \"ticket_evento\": \"./DATA/ticket_evento.csv\",\n","    \"factura\": \"./DATA/factura.csv\",\n","    \"item_factura\": \"./DATA/item_factura.csv\",\n","    \"producto_merchandising\": \"./DATA/producto_merchandising.csv\",\n","    \"equipo\": \"./DATA/equipo.csv\",\n","    \"encuentro_deportivo\": \"./DATA/encuentro_deportivo.csv\",\n","    \"objetivos_equipo\":\"./DATA/objetivo_equipo.csv\"\n","}\n","\n","for table_name, file_path in csv_files.items():\n","    # Leer CSV\n","    df = pd.read_csv(file_path)\n","\n","    # Cargar datos en la tabla\n","    df.to_sql(table_name, conn, if_exists=\"append\", index=False)\n","\n","# Verificación de datos cargados\n","for table_name in csv_files.keys():\n","    print(f\"Datos cargados en la tabla: {table_name}\")\n","    query = f\"SELECT * FROM {table_name} LIMIT 5\"\n","    result = pd.read_sql_query(query, conn)\n","    print(result)\n","\n","# Cerrar conexión\n","conn.close()"],"metadata":{"id":"5kfQXx25VX3r","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731896490376,"user_tz":180,"elapsed":266,"user":{"displayName":"Nicolas Prosperi","userId":"10161961860091181701"}},"outputId":"30ecdb70-c9ca-429a-f007-95c24750add0"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["Tabla localidad truncada.\n","Tabla evento truncada.\n","Tabla cliente truncada.\n","Tabla tipo_producto truncada.\n","Tabla producto_base truncada.\n","Tabla localidad_evento truncada.\n","Tabla ticket_evento truncada.\n","Tabla factura truncada.\n","Tabla item_factura truncada.\n","Tabla producto_merchandising truncada.\n","Tabla equipo truncada.\n","Tabla encuentro_deportivo truncada.\n","Tabla objetivos_equipo truncada.\n","Datos cargados en la tabla: localidad\n","   id_localidad sector_localidad  fila_localidad  numero_localidad\n","0             1                A               1                 1\n","1             2                A               1                 2\n","2             3                B               2                10\n","3             4                C               3                15\n","4             5                D               4                20\n","Datos cargados en la tabla: evento\n","   id_evento          descripcion       fecha\n","0          1  Partido de fútbol A  2024-11-01\n","1          2  Partido de fútbol B  2024-12-15\n","2          3     Partido de Rugby  2025-01-10\n","Datos cargados en la tabla: cliente\n","   id_cliente nombre   apellido                        email\n","0           1   Juan      Pérez         juanperez@domain.com\n","1           2    Ana   González      anagaonzalez@domain.com\n","2           3  Pedro    Ramírez      pedroramirez@domain.com\n","3           4  Carla  Fernandez  carla.fernandez@example.com\n","4           5   Luis   Martínez    luis.martinez@example.com\n","Datos cargados en la tabla: tipo_producto\n","   id_tipo_producto     descripcion\n","0                 1         Entrada\n","1                 2   Merchandising\n","2                 3          Bebida\n","3                 4  Entrada a tour\n","Datos cargados en la tabla: producto_base\n","   id_producto              nombre                           descripcion  \\\n","0            1         Entrada VIP  Acceso preferencial y zona exclusiva   \n","1            2     Entrada General                       Acceso estándar   \n","2            3    Camiseta Oficial                   Camiseta del evento   \n","3            4  Bebida Refrescante                       Botella de agua   \n","\n","   precio  id_tipo_producto  \n","0   150.0                 1  \n","1    50.0                 1  \n","2    25.0                 2  \n","3     2.5                 3  \n","Datos cargados en la tabla: localidad_evento\n","   id_localidad  id_evento   estado localia\n","0             1          1  Vendida    None\n","1             2          1  Vendida    None\n","2             3          2  Vendida    None\n","3             4          2  Vendida    None\n","4             5          1  Vendida    None\n","Datos cargados en la tabla: ticket_evento\n","   id_ticket_evento  id_producto  id_localidad  id_evento  \\\n","0                 1            1             1          1   \n","1                 2            2             2          1   \n","2                 3            1             3          2   \n","3                 4            1             1          1   \n","4                 5            2             2          1   \n","\n","  nombre_persona_ocupante dni_persona_ocupante  \n","0              Juan Pérez             12345678  \n","1            Ana González             23456789  \n","2           Pedro Ramírez             34567890  \n","3         Carla Fernandez             12345679  \n","4           Luis Martínez             23456790  \n","Datos cargados en la tabla: factura\n","   id_factura                fecha  id_cliente  total\n","0           1  2024-11-01 10:00:00           1    150\n","1           2  2024-11-01 11:00:00           2     75\n","2           3  2024-11-01 10:10:00           4    150\n","3           4  2024-11-01 10:20:00           5     75\n","4           5  2024-11-01 10:30:00           6    200\n","Datos cargados en la tabla: item_factura\n","   id_item  id_factura  id_producto_base  cantidad  precio_unitario\n","0        1           1                 1         1              150\n","1        2           2                 2         1               50\n","2        3           2                 3         1               25\n","3        4           3                 1         1              150\n","4        5           4                 2         1               50\n","Datos cargados en la tabla: producto_merchandising\n","   id_producto  id_producto_base  stock\n","0            1                 3    100\n","1            2                 4    150\n","Datos cargados en la tabla: equipo\n","   id_equipo         nombre       pais\n","0          1   Boca Juniors  Argentina\n","1          2    River Plate  Argentina\n","2          3  Independiente  Argentina\n","3          4    Racing Club  Argentina\n","4          5    San Lorenzo  Argentina\n","Datos cargados en la tabla: encuentro_deportivo\n","   id_evento  equipo_local  equipo_visitante\n","0          1             1                 2\n","1          2             3                 4\n","Datos cargados en la tabla: objetivos_equipo\n","   equipo   mes_anio     monto\n","0       1  1/11/2024  150000.0\n","1       2  1/12/2024  200000.0\n","2       3   1/4/2025  130000.0\n","3       4   1/8/2024  500000.0\n","4       5  1/10/2024  400000.0\n"]}]},{"cell_type":"code","source":["#-----------ETL FACT TABLE-----------------\n","\n","\n","import sqlite3\n","import pandas as pd\n","\n","# Conexión a las bases de datos\n","conn_tickets = sqlite3.connect(\"ticket_database.db\")\n","conn_dw = sqlite3.connect(\"tickets_dw.db\")\n","\n","# Extract: Leer datos relevantes de la base de datos de tickets\n","query_eventos = \"\"\"\n","SELECT\n","    e.descripcion AS nombre_evento,\n","    e.fecha,\n","    ld.estado AS localidad_evento_estado,\n","    c.nombre || ' ' || c.apellido AS nombre_apellido_cliente,\n","    c.email AS dni_cliente,\n","    te.nombre_persona_ocupante AS nombre_apellido_asistente,\n","    te.dni_persona_ocupante AS dni_asistente,\n","    pb.precio,\n","    el.nombre AS equipo_local,  -- Nombre del equipo local\n","    ev.nombre AS equipo_visitante,  -- Nombre del equipo visitante\n","    ld.localia  -- Agregar el campo 'localia' para decidir el equipo\n","FROM evento e\n","JOIN localidad_evento ld ON e.id_evento = ld.id_evento\n","LEFT JOIN cliente c ON c.id_cliente = (SELECT id_cliente FROM factura f WHERE f.id_factura = ld.id_evento LIMIT 1)\n","LEFT JOIN ticket_evento te ON te.id_localidad = ld.id_localidad\n","LEFT JOIN producto_base pb ON te.id_producto = pb.id_producto\n","LEFT JOIN encuentro_deportivo ed ON e.id_evento = ed.id_evento\n","LEFT JOIN equipo el ON ed.equipo_local = el.id_equipo  -- Unimos con la tabla equipo para el equipo local\n","LEFT JOIN equipo ev ON ed.equipo_visitante = ev.id_equipo  -- Unimos con la tabla equipo para el equipo visitante\n","\"\"\"\n","df_eventos = pd.read_sql(query_eventos, conn_tickets)\n","\n","# Transform: Crear columnas necesarias\n","df_eventos['fecha_id'] = pd.to_datetime(df_eventos['fecha']).dt.strftime('%Y%m')\n","fecha_dimension = df_eventos[['fecha', 'fecha_id']].drop_duplicates()\n","fecha_dimension['mes_anio'] = pd.to_datetime(fecha_dimension['fecha']).dt.to_period('M').astype(str)\n","\n","# Crear la columna 'equipo_ticket' en base al valor de 'localia'\n","df_eventos['equipo_ticket'] = df_eventos.apply(\n","    lambda row: row['equipo_local'] if row['localia'] else row['equipo_visitante'],\n","    axis=1\n",")\n","\n","\n","# Crear la fact_table con los datos transformados\n","fact_table = df_eventos[[\n","    'nombre_evento',\n","    'localidad_evento_estado',\n","    'nombre_apellido_cliente',\n","    'dni_cliente',\n","    'nombre_apellido_asistente',\n","    'dni_asistente',\n","    'precio',\n","    'equipo_ticket',\n","    'equipo_local',  # Ahora tenemos el nombre del equipo local\n","    'equipo_visitante',  # Ahora tenemos el nombre del equipo visitante\n","    'fecha_id'\n","]]\n","\n","# Load: Cargar datos en las tablas del Data Warehouse\n","# Cargar fecha_dimension\n","fecha_dimension_to_load = fecha_dimension[['fecha_id', 'mes_anio']].drop_duplicates()\n","fecha_dimension_to_load.to_sql('fecha_dimension', conn_dw, if_exists='append', index=False)\n","\n","# Cargar fact_table\n","fact_table.to_sql('fact_table', conn_dw, if_exists='append', index=False)\n","\n","# Cerrar conexiones\n","conn_tickets.close()\n","conn_dw.close()\n","\n","print(\"ETL completado exitosamente.\")"],"metadata":{"id":"SD9ZqMscZx_z","executionInfo":{"status":"error","timestamp":1731896899419,"user_tz":180,"elapsed":263,"user":{"displayName":"Nicolas Prosperi","userId":"10161961860091181701"}},"colab":{"base_uri":"https://localhost:8080/","height":356},"outputId":"a61c9200-beed-4c83-99c2-b7c59bbbfe32"},"execution_count":51,"outputs":[{"output_type":"error","ename":"IntegrityError","evalue":"UNIQUE constraint failed: fecha_dimension.fecha_id","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIntegrityError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-51-cf79b53b3963>\u001b[0m in \u001b[0;36m<cell line: 63>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     61\u001b[0m \u001b[0;31m# Cargar fecha_dimension\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m \u001b[0mfecha_dimension_to_load\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfecha_dimension\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'fecha_id'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'mes_anio'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop_duplicates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m \u001b[0mfecha_dimension_to_load\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_sql\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'fecha_dimension'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconn_dw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mif_exists\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'append'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;31m# Cargar fact_table\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    331\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfind_stack_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    332\u001b[0m                 )\n\u001b[0;32m--> 333\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    334\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    335\u001b[0m         \u001b[0;31m# error: \"Callable[[VarArg(Any), KwArg(Any)], Any]\" has no\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mto_sql\u001b[0;34m(self, name, con, schema, if_exists, index, index_label, chunksize, dtype, method)\u001b[0m\n\u001b[1;32m   3085\u001b[0m         \u001b[0;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mio\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0msql\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3086\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3087\u001b[0;31m         return sql.to_sql(\n\u001b[0m\u001b[1;32m   3088\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3089\u001b[0m             \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/sql.py\u001b[0m in \u001b[0;36mto_sql\u001b[0;34m(frame, name, con, schema, if_exists, index, index_label, chunksize, dtype, method, engine, **engine_kwargs)\u001b[0m\n\u001b[1;32m    840\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    841\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mpandasSQL_builder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcon\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mschema\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mschema\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mneed_transaction\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpandas_sql\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 842\u001b[0;31m         return pandas_sql.to_sql(\n\u001b[0m\u001b[1;32m    843\u001b[0m             \u001b[0mframe\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    844\u001b[0m             \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/sql.py\u001b[0m in \u001b[0;36mto_sql\u001b[0;34m(self, frame, name, if_exists, index, index_label, schema, chunksize, dtype, method, engine, **engine_kwargs)\u001b[0m\n\u001b[1;32m   2849\u001b[0m         )\n\u001b[1;32m   2850\u001b[0m         \u001b[0mtable\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcreate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2851\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mtable\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minsert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mchunksize\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2852\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2853\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mhas_table\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mschema\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/sql.py\u001b[0m in \u001b[0;36minsert\u001b[0;34m(self, chunksize, method)\u001b[0m\n\u001b[1;32m   1117\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1118\u001b[0m                 \u001b[0mchunk_iter\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstart_i\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mend_i\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0marr\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1119\u001b[0;31m                 \u001b[0mnum_inserted\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mexec_insert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeys\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mchunk_iter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1120\u001b[0m                 \u001b[0;31m# GH 46891\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1121\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mnum_inserted\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/sql.py\u001b[0m in \u001b[0;36m_execute_insert\u001b[0;34m(self, conn, keys, data_iter)\u001b[0m\n\u001b[1;32m   2545\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_execute_insert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeys\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata_iter\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2546\u001b[0m         \u001b[0mdata_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_iter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2547\u001b[0;31m         \u001b[0mconn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecutemany\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minsert_statement\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_rows\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2548\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mconn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrowcount\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2549\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIntegrityError\u001b[0m: UNIQUE constraint failed: fecha_dimension.fecha_id"]}]},{"cell_type":"code","source":["#---------------ETL OBJETIVO EQUIPOS---------------- FALTA NO FUNCIONA\n","import sqlite3\n","import pandas as pd\n","\n","# Conexión a las bases de datos\n","conn_tickets = sqlite3.connect(\"ticket_database.db\")\n","conn_dw = sqlite3.connect(\"tickets_dw.db\")\n","\n","# Extract: Datos de facturación, productos, y equipos\n","query_ventas = \"\"\"\n","SELECT\n","    f.fecha,\n","    f.total AS total_factura,\n","    ef.equipo_local,\n","    ef.equipo_visitante\n","FROM factura f\n","JOIN item_factura i ON f.id_factura = i.id_factura\n","JOIN producto_base pb ON i.id_producto_base = pb.id_producto\n","LEFT JOIN encuentro_deportivo ef ON pb.id_producto = ef.id_evento\n","\"\"\"\n","df_ventas = pd.read_sql(query_ventas, conn_tickets)\n","\n","query_objetivos = \"\"\"\n","SELECT\n","    o.mes_anio,\n","    e.nombre AS nombre_equipo,\n","    o.monto AS objetivo_mes\n","FROM objetivos_equipo o\n","JOIN equipo e ON o.equipo = e.id_equipo\n","\"\"\"\n","df_objetivos = pd.read_sql(query_objetivos, conn_tickets)\n","\n","# Transform: Calcular total de ventas por equipo y mes\n","df_ventas['fecha_id'] = pd.to_datetime(df_ventas['fecha']).dt.strftime('%Y%m')\n","\n","# Calcular total de ventas por equipo\n","ventas_por_equipo = df_ventas.melt(\n","    id_vars=['fecha_id', 'total_factura'],\n","    value_vars=['equipo_local', 'equipo_visitante'],\n","    var_name='tipo_equipo',\n","    value_name='nombre_equipo'\n",").groupby(['nombre_equipo', 'fecha_id'])['total_factura'].sum().reset_index()\n","\n","# Unir ventas con objetivos\n","df_resultado = pd.merge(\n","    ventas_por_equipo,\n","    df_objetivos,\n","    how='left',\n","    left_on=['nombre_equipo', 'fecha_id'],\n","    right_on=['nombre_equipo', 'mes_anio']\n",").drop(columns=['mes_anio']).rename(columns={\n","    'total_factura': 'total_ventas_mes',\n","    'objetivo_mes': 'objetivos_mes'\n","})\n","\n","# Load: Insertar datos en la tabla total_ventas_equipo_objetivos\n","df_resultado.to_sql('total_ventas_equipo_objetivos', conn_dw, if_exists='append', index=False)\n","\n","# Cerrar conexiones\n","conn_tickets.close()\n","conn_dw.close()\n","\n","print(\"ETL de total de ventas por equipo completado.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":356},"id":"s3144o6-2-4X","executionInfo":{"status":"error","timestamp":1731896691433,"user_tz":180,"elapsed":267,"user":{"displayName":"Nicolas Prosperi","userId":"10161961860091181701"}},"outputId":"e1579332-154e-401d-b0bb-93ce1ea08e03"},"execution_count":49,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"You are trying to merge on float64 and object columns for key 'nombre_equipo'. If you wish to proceed you should use pd.concat","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-49-6c674126a5c6>\u001b[0m in \u001b[0;36m<cell line: 45>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     44\u001b[0m \u001b[0;31m# Unir ventas con objetivos\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 45\u001b[0;31m df_resultado = pd.merge(\n\u001b[0m\u001b[1;32m     46\u001b[0m     \u001b[0mventas_por_equipo\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m     \u001b[0mdf_objetivos\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36mmerge\u001b[0;34m(left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[1;32m    168\u001b[0m         )\n\u001b[1;32m    169\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 170\u001b[0;31m         op = _MergeOperation(\n\u001b[0m\u001b[1;32m    171\u001b[0m             \u001b[0mleft_df\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    172\u001b[0m             \u001b[0mright_df\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, indicator, validate)\u001b[0m\n\u001b[1;32m    805\u001b[0m         \u001b[0;31m# validate the merge keys dtypes. We may need to coerce\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    806\u001b[0m         \u001b[0;31m# to avoid incompatible dtypes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 807\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_coerce_merge_keys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    808\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    809\u001b[0m         \u001b[0;31m# If argument passed to validate,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36m_maybe_coerce_merge_keys\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1506\u001b[0m                     \u001b[0minferred_right\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mstring_types\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0minferred_left\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mstring_types\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1507\u001b[0m                 ):\n\u001b[0;32m-> 1508\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1509\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1510\u001b[0m             \u001b[0;31m# datetimelikes must match exactly\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: You are trying to merge on float64 and object columns for key 'nombre_equipo'. If you wish to proceed you should use pd.concat"]}]},{"cell_type":"code","source":["#-------------DATOS DEL WAREHOUSE---------------\n","\n","import sqlite3\n","import pandas as pd\n","\n","# Conexión al data warehouse\n","conn_dw = sqlite3.connect(\"tickets_dw.db\")\n","\n","# Consulta SQL para obtener los primeros 10 registros de la fact_table\n","query = \"\"\"\n","SELECT *\n","FROM fact_table\n","LIMIT 10\n","\"\"\"\n","\n","# Ejecutar la consulta y cargar los resultados en un DataFrame\n","df_fact_table = pd.read_sql(query, conn_dw)\n","\n","# Mostrar resultados\n","print(\"Primeros 10 registros de la Fact Table:\")\n","print(df_fact_table)\n","\n","# Consulta SQL para unir total_ventas_equipo_objetivos con fecha_dimension\n","#query = \"\"\"\n","#SELECT\n","#    fv.nombre_equipo,\n","#    fd.mes_anio AS mes_y_anio,\n","#    fv.total_ventas_mes,\n","#    fv.objetivos_mes\n","#FROM total_ventas_equipo_objetivos fv\n","#JOIN fecha_dimension fd ON fv.fecha_id = fd.fecha_id\n","#ORDER BY fd.mes_anio, fv.nombre_equipo\n","#\"\"\"\n","\n","# Ejecutar la consulta y cargar los resultados en un DataFrame\n","df_resultado = pd.read_sql(query, conn_dw)\n","\n","# Mostrar resultados\n","print(\"Total de Ventas por Equipo con Mes y Año:\")\n","print(df_resultado)\n","\n","\n","\n","\n","\n","# Cerrar conexión\n","conn_dw.close()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QMienx4r3NJ0","executionInfo":{"status":"ok","timestamp":1731896698177,"user_tz":180,"elapsed":266,"user":{"displayName":"Nicolas Prosperi","userId":"10161961860091181701"}},"outputId":"d6b194b3-49b6-4231-c26a-75563cd1dc70"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["Primeros 10 registros de la Fact Table:\n","         nombre_evento   equipo_local equipo_visitante tipo_evento  \\\n","0  Partido de fútbol A   Boca Juniors      River Plate        None   \n","1  Partido de fútbol A   Boca Juniors      River Plate        None   \n","2  Partido de fútbol A   Boca Juniors      River Plate        None   \n","3  Partido de fútbol A   Boca Juniors      River Plate        None   \n","4  Partido de fútbol B  Independiente      Racing Club        None   \n","5  Partido de fútbol B  Independiente      Racing Club        None   \n","6  Partido de fútbol B  Independiente      Racing Club        None   \n","7  Partido de fútbol A   Boca Juniors      River Plate        None   \n","8     Partido de Rugby           None             None        None   \n","9  Partido de fútbol A   Boca Juniors      River Plate        None   \n","\n","  localidad_evento_estado nombre_apellido_cliente  \\\n","0                 Vendida              Juan Pérez   \n","1                 Vendida              Juan Pérez   \n","2                 Vendida              Juan Pérez   \n","3                 Vendida              Juan Pérez   \n","4                 Vendida            Ana González   \n","5                 Vendida            Ana González   \n","6                 Vendida            Ana González   \n","7                 Vendida              Juan Pérez   \n","8                 Vendida         Carla Fernandez   \n","9                 Vendida              Juan Pérez   \n","\n","                   dni_cliente nombre_apellido_asistente dni_asistente  \\\n","0         juanperez@domain.com           Carla Fernandez      12345679   \n","1         juanperez@domain.com                Juan Pérez      12345678   \n","2         juanperez@domain.com              Ana González      23456789   \n","3         juanperez@domain.com             Luis Martínez      23456790   \n","4      anagaonzalez@domain.com               María López      34567891   \n","5      anagaonzalez@domain.com             Pedro Ramírez      34567890   \n","6      anagaonzalez@domain.com                José Ortiz      45678912   \n","7         juanperez@domain.com                Rosa Gómez      56789023   \n","8  carla.fernandez@example.com               Carlos Ruiz      67890134   \n","9         juanperez@domain.com             Laura Jiménez      78901245   \n","\n","   precio equipo_ticket fecha_id  \n","0     150   River Plate   202411  \n","1     150   River Plate   202411  \n","2      50   River Plate   202411  \n","3      50   River Plate   202411  \n","4     150   Racing Club   202412  \n","5     150   Racing Club   202412  \n","6      50   Racing Club   202412  \n","7     150   River Plate   202411  \n","8      50          None   202501  \n","9     150   River Plate   202411  \n","Total de Ventas por Equipo con Mes y Año:\n","         nombre_evento   equipo_local equipo_visitante tipo_evento  \\\n","0  Partido de fútbol A   Boca Juniors      River Plate        None   \n","1  Partido de fútbol A   Boca Juniors      River Plate        None   \n","2  Partido de fútbol A   Boca Juniors      River Plate        None   \n","3  Partido de fútbol A   Boca Juniors      River Plate        None   \n","4  Partido de fútbol B  Independiente      Racing Club        None   \n","5  Partido de fútbol B  Independiente      Racing Club        None   \n","6  Partido de fútbol B  Independiente      Racing Club        None   \n","7  Partido de fútbol A   Boca Juniors      River Plate        None   \n","8     Partido de Rugby           None             None        None   \n","9  Partido de fútbol A   Boca Juniors      River Plate        None   \n","\n","  localidad_evento_estado nombre_apellido_cliente  \\\n","0                 Vendida              Juan Pérez   \n","1                 Vendida              Juan Pérez   \n","2                 Vendida              Juan Pérez   \n","3                 Vendida              Juan Pérez   \n","4                 Vendida            Ana González   \n","5                 Vendida            Ana González   \n","6                 Vendida            Ana González   \n","7                 Vendida              Juan Pérez   \n","8                 Vendida         Carla Fernandez   \n","9                 Vendida              Juan Pérez   \n","\n","                   dni_cliente nombre_apellido_asistente dni_asistente  \\\n","0         juanperez@domain.com           Carla Fernandez      12345679   \n","1         juanperez@domain.com                Juan Pérez      12345678   \n","2         juanperez@domain.com              Ana González      23456789   \n","3         juanperez@domain.com             Luis Martínez      23456790   \n","4      anagaonzalez@domain.com               María López      34567891   \n","5      anagaonzalez@domain.com             Pedro Ramírez      34567890   \n","6      anagaonzalez@domain.com                José Ortiz      45678912   \n","7         juanperez@domain.com                Rosa Gómez      56789023   \n","8  carla.fernandez@example.com               Carlos Ruiz      67890134   \n","9         juanperez@domain.com             Laura Jiménez      78901245   \n","\n","   precio equipo_ticket fecha_id  \n","0     150   River Plate   202411  \n","1     150   River Plate   202411  \n","2      50   River Plate   202411  \n","3      50   River Plate   202411  \n","4     150   Racing Club   202412  \n","5     150   Racing Club   202412  \n","6      50   Racing Club   202412  \n","7     150   River Plate   202411  \n","8      50          None   202501  \n","9     150   River Plate   202411  \n"]}]}]}